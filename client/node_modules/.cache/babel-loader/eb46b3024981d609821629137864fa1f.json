{"ast":null,"code":"/**\r\n * Created by agros on 08.06.2019.\r\n */\nimport { GET_CONTACT, GET_CONTACTS, CREATE_CONTACT, DELETE_CONTACT, EDIT_CONTACT, CLEAR_CONTACT } from './actionTypes';\nimport { client } from '../utils/apolloClient';\nimport { createContact, deleteContact, editContact, fetchCallHistory, fetchContact, fetchContacts } from '../queries/queries';\nexport const fetchContactAction = id => async dispatch => {\n  try {\n    const request = await client.query({\n      query: fetchContact,\n      variables: {\n        id: id\n      }\n    });\n    const response = await request;\n    dispatch({\n      type: GET_CONTACT,\n      payload: response.data\n    });\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const fetchCallHistoryAction = id => async dispatch => {\n  try {\n    const request = await client.query({\n      query: fetchCallHistory,\n      variables: {\n        id: id\n      }\n    });\n    const response = await request;\n    dispatch({\n      type: GET_CONTACT,\n      payload: response.data\n    });\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const fetchContactsAction = () => async dispatch => {\n  try {\n    const request = await client.query({\n      query: fetchContacts,\n      variables: {\n        offset: 2,\n        limit: 5\n      }\n    });\n    const response = await request;\n    dispatch({\n      type: GET_CONTACTS,\n      payload: response.data\n    });\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const createContactAction = formData => async dispatch => {\n  try {\n    const request = await client.mutate({\n      mutation: createContact,\n      variables: {\n        name: formData.name,\n        phone: formData.phone,\n        email: formData.email\n      }\n    });\n    const response = await request;\n    dispatch({\n      type: CREATE_CONTACT,\n      payload: response.data.addContact\n    });\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const editContactAction = formData => async dispatch => {\n  try {\n    const request = await client.mutate({\n      mutation: editContact,\n      variables: {\n        id: formData.id,\n        name: formData.name,\n        phone: formData.phone,\n        email: formData.email\n      }\n    });\n    const response = await request;\n    dispatch({\n      type: EDIT_CONTACT,\n      payload: response.data.editContact\n    });\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const deleteContactAction = id => async dispatch => {\n  if (window.confirm('Are you sure? This could not be undone!')) {\n    try {\n      const request = await client.mutate({\n        mutation: deleteContact,\n        variables: {\n          id: id\n        }\n      });\n      await request;\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: id\n      });\n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n};\nexport const clearContact = () => async dispatch => {\n  try {\n    dispatch({\n      type: CLEAR_CONTACT\n    });\n  } catch (err) {\n    console.error(err.message);\n  }\n};","map":{"version":3,"sources":["C:\\Users\\agros\\PhpstormProjects\\contacts-manager\\client\\src\\actions\\contact.js"],"names":["GET_CONTACT","GET_CONTACTS","CREATE_CONTACT","DELETE_CONTACT","EDIT_CONTACT","CLEAR_CONTACT","client","createContact","deleteContact","editContact","fetchCallHistory","fetchContact","fetchContacts","fetchContactAction","id","dispatch","request","query","variables","response","type","payload","data","err","console","error","message","fetchCallHistoryAction","fetchContactsAction","offset","limit","createContactAction","formData","mutate","mutation","name","phone","email","addContact","editContactAction","deleteContactAction","window","confirm","clearContact"],"mappings":"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","sourcesContent":["/**\r\n * Created by agros on 08.06.2019.\r\n */\r\nimport {GET_CONTACT, GET_CONTACTS, CREATE_CONTACT, DELETE_CONTACT, EDIT_CONTACT, CLEAR_CONTACT} from './actionTypes';\r\nimport {client} from '../utils/apolloClient';\r\nimport {\r\n    createContact,\r\n    deleteContact,\r\n    editContact,\r\n    fetchCallHistory,\r\n    fetchContact,\r\n    fetchContacts\r\n} from '../queries/queries';\r\n\r\n\r\nexport const fetchContactAction = id => async dispatch => {\r\n    try {\r\n        const request = await client.query({\r\n            query: fetchContact,\r\n            variables: {\r\n                id: id\r\n            }\r\n        });\r\n        const response = await request;\r\n        dispatch({\r\n            type: GET_CONTACT,\r\n            payload: response.data\r\n        })\r\n    } catch (err) {\r\n        console.error(err.message);\r\n    }\r\n};\r\n\r\nexport const fetchCallHistoryAction = id => async dispatch => {\r\n    try {\r\n        const request = await client.query({\r\n            query: fetchCallHistory,\r\n            variables: {\r\n                id: id\r\n            }\r\n        });\r\n        const response = await request;\r\n        dispatch({\r\n            type: GET_CONTACT,\r\n            payload: response.data\r\n        })\r\n    } catch (err) {\r\n        console.error(err.message);\r\n    }\r\n};\r\n\r\nexport const fetchContactsAction = () => async dispatch => {\r\n    try {\r\n        const request = await client.query({\r\n            query: fetchContacts,\r\n            variables: {\r\n                offset: 2,\r\n                limit: 5\r\n            }\r\n        });\r\n        const response = await request;\r\n        dispatch({\r\n            type: GET_CONTACTS,\r\n            payload: response.data\r\n        })\r\n    } catch (err) {\r\n        console.error(err.message);\r\n    }\r\n};\r\n\r\nexport const createContactAction = formData => async dispatch => {\r\n    try {\r\n        const request = await client.mutate({\r\n            mutation: createContact,\r\n            variables: {\r\n                name: formData.name,\r\n                phone: formData.phone,\r\n                email: formData.email\r\n            }\r\n        });\r\n\r\n        const response = await request;\r\n        dispatch({\r\n            type: CREATE_CONTACT,\r\n            payload: response.data.addContact\r\n        })\r\n    } catch (err) {\r\n        console.error(err.message);\r\n    }\r\n};\r\n\r\nexport const editContactAction = formData => async dispatch => {\r\n    try {\r\n        const request = await client.mutate({\r\n            mutation: editContact,\r\n            variables: {\r\n                id: formData.id,\r\n                name: formData.name,\r\n                phone: formData.phone,\r\n                email: formData.email\r\n            }\r\n        });\r\n\r\n        const response = await request;\r\n        dispatch({\r\n            type: EDIT_CONTACT,\r\n            payload: response.data.editContact\r\n        })\r\n\r\n    } catch (err) {\r\n        console.error(err.message);\r\n    }\r\n};\r\n\r\nexport const deleteContactAction = id => async dispatch => {\r\n    if(window.confirm('Are you sure? This could not be undone!')){\r\n        try {\r\n            const request = await client.mutate({\r\n                mutation: deleteContact,\r\n                variables: {\r\n                    id: id\r\n                }\r\n            });\r\n            await request;\r\n            dispatch({\r\n                type: DELETE_CONTACT,\r\n                payload: id\r\n            })\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n};\r\n\r\nexport const clearContact = () => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: CLEAR_CONTACT\r\n        })\r\n    } catch (err) {\r\n        console.error(err.message);\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}