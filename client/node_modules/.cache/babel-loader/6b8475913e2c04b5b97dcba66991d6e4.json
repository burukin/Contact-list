{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Users\\\\agros\\\\PhpstormProjects\\\\contacts-manager\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"C:\\\\Users\\\\agros\\\\PhpstormProjects\\\\contacts-manager\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\agros\\\\PhpstormProjects\\\\contacts-manager\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\agros\\\\PhpstormProjects\\\\contacts-manager\\\\client\\\\src\\\\components\\\\contacts\\\\ContactForm.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    mutation AddContact (\\n        $name: String!,\\n        $phone: String!,\\n        $email: String!\\n    ){\\n        addContact(name: $name, phone: $phone, email: $email){\\n            name\\n            phone\\n            email\\n        }\\n    }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\r\n * Created by agros on 08.06.2019.\r\n */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport gqt from 'graphql-tag';\nimport { graphql } from 'react-apollo';\nimport fetchQuery from '../../queries/fetchContacts'; //Stateful component for form displaying.\n//Has two modes for post creation and post updating. Depends on value of updateMode.\n\nconst ContactForm = ({\n  contact,\n  updateMode,\n  submitted,\n  mutate\n}) => {\n  console.log(contact); //Variable for storing data from from and method from its updating\n  //Initial value is taken from post props\n\n  const _useState = useState({\n    name: contact.name,\n    phone: contact.phone,\n    email: contact.email\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formData = _useState2[0],\n        setFormData = _useState2[1];\n\n  const onChangeHandler = e => {\n    setFormData(_objectSpread({}, formData, {\n      [e.target.name]: e.target.value\n    }));\n  }; //Method for post adding or updating\n\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n\n    if (updateMode) {\n      submitted(false);\n    } else {\n      mutate({\n        variables: {\n          name: formData.name,\n          phone: formData.phone,\n          email: formData.email\n        },\n        refetchQueries: [{\n          query: fetchQuery\n        }]\n      });\n      setFormData({\n        name: '',\n        phone: '',\n        email: ''\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"post-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"bg-primary p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Create a contact\")), React.createElement(\"form\", {\n    className: \"form my-1\",\n    onSubmit: e => onFormSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    value: formData.name,\n    placeholder: \"Input a name\",\n    onChange: e => onChangeHandler(e),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"phone\",\n    value: formData.phone,\n    placeholder: \"Input a phone number\",\n    onChange: e => onChangeHandler(e),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Format: country code - operator code - 123 - 4567\"), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"email\",\n    name: \"email\",\n    value: formData.email,\n    placeholder: \"Input an email\",\n    onChange: e => onChangeHandler(e),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-dark my-1\",\n    value: \"Create\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })));\n};\n\nconst addContactMutation = gqt(_templateObject());\nContactForm.defaultProps = {\n  contact: {\n    name: '',\n    phone: '',\n    email: '',\n    history: ''\n  },\n  updateMode: false\n};\nContactForm.propTypes = {\n  contact: PropTypes.object\n};\nexport default graphql(addContactMutation)(ContactForm);","map":{"version":3,"sources":["C:\\Users\\agros\\PhpstormProjects\\contacts-manager\\client\\src\\components\\contacts\\ContactForm.js"],"names":["React","useState","PropTypes","gqt","graphql","fetchQuery","ContactForm","contact","updateMode","submitted","mutate","console","log","name","phone","email","formData","setFormData","onChangeHandler","e","target","value","onFormSubmit","preventDefault","variables","refetchQueries","query","addContactMutation","defaultProps","history","propTypes","object"],"mappings":"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","sourcesContent":["/**\r\n * Created by agros on 08.06.2019.\r\n */\r\nimport React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport gqt from 'graphql-tag';\r\nimport {graphql} from 'react-apollo';\r\n\r\nimport fetchQuery from '../../queries/fetchContacts';\r\n\r\n\r\n//Stateful component for form displaying.\r\n//Has two modes for post creation and post updating. Depends on value of updateMode.\r\nconst ContactForm = ({ contact, updateMode, submitted, mutate}) => {\r\n    console.log(contact);\r\n\r\n    //Variable for storing data from from and method from its updating\r\n    //Initial value is taken from post props\r\n    const [formData, setFormData] = useState({\r\n        name: contact.name,\r\n        phone: contact.phone,\r\n        email: contact.email\r\n    });\r\n\r\n    const onChangeHandler = e => {\r\n        setFormData({...formData, [e.target.name]: e.target.value});\r\n    };\r\n\r\n    //Method for post adding or updating\r\n    const onFormSubmit = e => {\r\n        e.preventDefault();\r\n        if (updateMode) {\r\n            submitted(false);\r\n        } else {\r\n            mutate({\r\n                variables: {\r\n                    name: formData.name,\r\n                    phone: formData.phone,\r\n                    email: formData.email\r\n                },\r\n                refetchQueries: [{ query: fetchQuery }]\r\n            });\r\n\r\n            setFormData({\r\n                name: '',\r\n                phone: '',\r\n                email: ''\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"post-form\">\r\n            <div className=\"bg-primary p\">\r\n                <h3>Create a contact</h3>\r\n            </div>\r\n            <form className=\"form my-1\" onSubmit={ (e)=> onFormSubmit(e)}>\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" name=\"name\" value={formData.name} placeholder=\"Input a name\"  onChange={(e) => onChangeHandler(e)} required/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" name=\"phone\" value={formData.phone} placeholder=\"Input a phone number\"  onChange={(e) => onChangeHandler(e)} required/>\r\n                </div>\r\n                <span>Format: country code - operator code - 123 - 4567</span>\r\n                <div className=\"form-group\">\r\n                    <input type=\"email\" name=\"email\" value={formData.email} placeholder=\"Input an email\"  onChange={(e) => onChangeHandler(e)} required/>\r\n                </div>\r\n                <input type=\"submit\" className=\"btn btn-dark my-1\" value=\"Create\" />\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst addContactMutation = gqt`\r\n    mutation AddContact (\r\n        $name: String!,\r\n        $phone: String!,\r\n        $email: String!\r\n    ){\r\n        addContact(name: $name, phone: $phone, email: $email){\r\n            name\r\n            phone\r\n            email\r\n        }\r\n    }\r\n`;\r\n\r\nContactForm.defaultProps = {\r\n    contact: {\r\n        name: '',\r\n        phone: '',\r\n        email: '',\r\n        history: ''\r\n    },\r\n    updateMode: false\r\n};\r\n\r\nContactForm.propTypes = {\r\n    contact: PropTypes.object\r\n};\r\n\r\nexport default graphql(addContactMutation)(ContactForm);"]},"metadata":{},"sourceType":"module"}